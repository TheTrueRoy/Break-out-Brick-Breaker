package tsg.ttt.main.states;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Iterator;

import tsg.ttt.main.Game;
import tsg.ttt.main.Handler;
import tsg.ttt.main.control.keyboard.KeyManager;
import tsg.ttt.main.gfx.Assets;
import tsg.ttt.main.ui.*;
import tsg.ttt.main.ui.particles.brickParticle;
import tsg.ttt.main.ui.particles.starParticle;

public class BrickState extends State{
	
	private UIManager uiManager;
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	KeyManager keyManager = handler.getKeyManager();
	int timeEsc = 0;
	int timeBomb = 0;
	int time = 0;
	long lastBreak = 0;

	//Settings
		int diff = Game.getDifficulty();
		double emptyChance = 0.1;
		int scale = 2;
	//Power UPs 
		boolean drill = false;
		boolean magnet = false;
	//Upgrades
		double paddleBoost = 0;
		double comboMult = 1;
			int combo = 0;
			UIImage[] digitsC;
	//Level
		int DiffSpeedMult = 6;
		int DiffScoreMult = 10;
	
	ArrayList<Brick> bricks = new ArrayList<Brick>();
	
	UIImage charge;
	
	UIImage paddle;
	int paddleX = 0, paddleW = 400, paddleH = 100;
	Rectangle pBounds = new Rectangle(0,screenSize.height-paddleH,paddleW,paddleH);
	
	UIImage paddle2;
	Rectangle pBounds2 = new Rectangle(0,screenSize.height-paddleH,paddleW,paddleH);
	
	UIImage ball;
	double ballD, ballX, ballY, ballVX, ballVY; 
	int ballW = 50, speed = DiffSpeedMult*(diff+1), paddleSpeed = (int) (10+paddleBoost);
	int brickReward = (int) (Math.pow(diff,2)+1) * DiffScoreMult;
	Rectangle bBounds = new Rectangle(0,0,ballW,ballW);
	
	int points = 0;
	UIImage[] digits;
	
	public BrickState(Handler handler) {
		super(handler);
	}
	
	public void init() {
		diff = Game.getDifficulty();
		
		speed = DiffSpeedMult*(Game.getDifficulty()+1);
		points = 0;
		combo = 0;
		brickReward = (int) (Math.pow(diff,2)+1) * DiffScoreMult;
		
		ballD = Math.random()*90+45;
		ballD = Math.toRadians(ballD);
		ballX = screenSize.width/2; ballY = screenSize.height-paddleH-100; ballVX = Math.cos(ballD)*3; ballVY = Math.sin(ballD)*3;
		timeEsc = 0;
		timeBomb = 0;
		uiManager = new UIManager(handler);
		handler.getMouseManager().setUIManager(uiManager);
		paddle = new UIImage(screenSize.width/2-paddleW/2, screenSize.height-paddleH, paddleW, paddleH, Assets.bricks[0]);
		paddle2 = new UIImage(screenSize.width*3/2, screenSize.height-paddleH, paddleW, paddleH, Assets.bricks[0]);
		ball = new UIImage((int)ballX, (int)ballY, ballW, ballW, Assets.o);
		uiManager.addObject(paddle);
		uiManager.addObject(paddle2);
		uiManager.addObject(ball);
		charge = new UIImage(10, 194, 20, 0, Assets.bricks[5]);
		uiManager.addObject(charge);
		bricks.clear();
		for(int i = 0; i < 8*scale; i++) {
			for(int j = 0; j < 10*scale; j++) {
				int health = Math.min(Math.max((int)((Math.random()*11.0-1)/(i+1)*scale*2),1),9);
				Brick brick = new Brick(j*160/scale+120+80/scale*(i%2),i*60/scale+180,160/scale,60/scale,health);
				double real = Math.random();
				if (real > emptyChance) {
					bricks.add(brick);
					uiManager.addObject(brick);
				}
			}
		}
		lastBreak = System.nanoTime();
	}
	
	public void tick() {
		//Checks if the ball is just bouncing left and right aimlessly

		System.out.println(System.nanoTime()-lastBreak);
		if ((lastBreak + 10000000000l) < System.nanoTime()) {
			System.out.println(lastBreak);
			lastBreak = System.nanoTime();
			ballD = Math.toRadians(90);
			ballX = screenSize.width/2; ballY = screenSize.height-paddleH-100; ballVX = Math.cos(ballD)*3; ballVY = Math.sin(ballD)*3;
		}
		
		//Most of the games code
		if (keyManager.right == true) { 
			paddle.setX(paddle.getX()+paddleSpeed);
		}
		if (keyManager.left == true) { 
			paddle.setX(paddle.getX()-paddleSpeed);
		}
		if (keyManager.space == true) { //Explosion
			if (timeBomb >= 220) {
				int bombRadius = 60;
				//Effect
				for (int i = 0; i < 30; i++) {
					double wid = Math.random()*100+50;
					uiManager.addObject(new starParticle((float)(Math.random()*(ballW+bombRadius*2)-bombRadius+ball.getX()-wid/2), (float)(Math.random()*(ballW+bombRadius*2)-bombRadius+ball.getY()-wid/2), (int)wid, (int)wid, (int)(Math.random()*40)+20, 60, (float)Math.random()*30-15, (float)Math.random()*30-15));
				}
				//Brick Damage
				Iterator<Brick> it = bricks.iterator();
				ArrayList<Brick> broken = new ArrayList<Brick>();
				while(it.hasNext()) {
					Brick e = it.next();
					Rectangle r = new Rectangle((int)e.getX()-bombRadius, (int)e.getY()-bombRadius, e.getWidth()+bombRadius*2, e.getHeight()+bombRadius*2);
					if (r.intersects(bBounds)) 
						broken.add(e);
				}
				it = broken.iterator();
				while(it.hasNext()) {
					combo++;
					points+=brickReward*combo*comboMult;
					Brick e = it.next();
					uiManager.addObject(new brickParticle(e.getX(), e.getY(), e.getWidth(), e.getHeight(), screenSize.height, (float)-ballVX, (float)ballVY, e.getHealth()));
					e.damage(100);
					bricks.remove(e);
				}
				timeBomb = 0;
			}
		}
		if (keyManager.esc == true) { 
			State.setState(handler.getGame().menuState);
		}
		
		//Trippy side portal nonsense
		if (paddle.getX() > screenSize.width)//Moves primary paddle to replace clone on left
			paddle.setX(paddle.getX()-screenSize.width);
		if (paddle.getX() < 0)//Moves primary paddle to replace clone on right
			paddle.setX(paddle.getX()+screenSize.width);
		
		//Moves clone to the side more likely to require it next as well as removing it after teleportation
		if (paddle.getX()+paddleW/2 < screenSize.width/2) {
			paddle2.setX(paddle.getX()+screenSize.width);
		} else {
			paddle2.setX(paddle.getX()-screenSize.width);
		}
		
		pBounds.x = (int) paddle.getX();
		pBounds2.x = (int) paddle2.getX();
		bBounds.x = (int) ball.getX();
		bBounds.y = (int) ball.getY();
		
		if (pBounds.intersects(bBounds)) {
			ballD = (-ballD - (Math.PI - (ball.getX()+ball.getWidth()-paddle.getX())/(paddleW+ballW)*Math.PI))/2;
			ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
			combo=0; //Resets combo count when the paddle is hit
			lastBreak = System.nanoTime();
		} else if (pBounds2.intersects(bBounds)) {
			ballD = (-ballD - (Math.PI - (ball.getX()+ball.getWidth()-paddle2.getX())/(paddleW+ballW)*Math.PI))/2;
			ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
			combo=0; //Resets combo count when the paddle is hit
			lastBreak = System.nanoTime(); //player interaction resets ball reset CD
		}
		if (ball.getY() > screenSize.height-ballW) {
			State.setState(handler.getGame().menuState);
		} else if (ball.getY() < 0) {
			ball.setY(0);
			ballD = -ballD;
			ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
		}
		if (ball.getX() > screenSize.width-ballW) {
			ball.setX(screenSize.width-ballW);
			ballD = Math.PI-ballD;
			ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
		} else if (ball.getX() < 0) {
			ball.setX(0);
			ballD = Math.PI-ballD;
			ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
		}
		
		Iterator<Brick> it = bricks.iterator();
		ArrayList<Brick> broken = new ArrayList<Brick>();
		boolean hFlip = drill, vFlip = drill;
		while(it.hasNext()) {
			Brick e = it.next();
			Rectangle r = new Rectangle((int)e.getX(), (int)e.getY(), e.getWidth(), e.getHeight());
			if (r.intersects(bBounds)) {
				if (!hFlip && bBounds.y+bBounds.height/3 < r.y+r.height && bBounds.y+bBounds.height*2/3 > r.y) { //If it blatantly hits the side of the brick, it bounces of the side
					hFlip = true;
					ballD = Math.PI-ballD;
					ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
				} else if (!vFlip) { //It hits the top/near the top, it bounces back
					vFlip = true;
					ballD = -ballD;
					ballVX = Math.cos(ballD)*speed; ballVY = Math.sin(ballD)*speed;
				}
				lastBreak = System.nanoTime();
				broken.add(e);
			}
		}
		it = broken.iterator();
		while(it.hasNext()) {
			combo++;
			points+=brickReward*combo*comboMult;
			Brick e = it.next();
			uiManager.addObject(new brickParticle(e.getX(), e.getY(), e.getWidth(), e.getHeight(), screenSize.height, (float)-ballVX, (float)ballVY, e.getHealth()));
			e.damage(3-Game.getDifficulty()+(int)(combo/20));
			if (e.getHealth() < 1) {
				bricks.remove(e);
			}
		}
		
		if (bricks.size() == 0)
			init();
		
		ball.setX((float)(ball.getX()+ballVX));
		ball.setY((float)(ball.getY()+ballVY));
		
		String count;
		//Updates SCORE Counter
		count = Integer.toString(points);
		if (digits != null) {
			for (int i = 0; i < digits.length; i++) {
				digits[i].setActive(false);
			}
		}
		digits = new UIImage[count.length()];
		for (int i = 0; i < count.length(); i++) {
			digits[i] = new UIImage(10+i*62, 16, 54, 66, Assets.numbers[Character.getNumericValue(count.charAt(i))]);
			uiManager.addObject(digits[i]);
		}
		
		//Updates COMBO Counter
		count = Integer.toString(combo);
		if (digitsC != null) {
			for (int i = 0; i < digitsC.length; i++) {
				digitsC[i].setActive(false);
			}
		}
		digitsC = new UIImage[count.length()];
		for (int i = 0; i < count.length(); i++) {
			if (combo == 0) {
				speed = DiffSpeedMult*(Game.getDifficulty()+1);
				digitsC[i] = new UIImage(10+i*62, 100, 54, 66, Assets.numbers[Character.getNumericValue(count.charAt(i))]);
			}
			else if (combo < 10) {
				digitsC[i] = new UIImage(10+i*62, 100, 54, 66, Assets.numbersBLUE[Character.getNumericValue(count.charAt(i))]);
			}
			else {
				speed = DiffSpeedMult*(Game.getDifficulty()+1) + 2;
				digitsC[i] = new UIImage(10+i*62, 100, 54, 66, Assets.numbersRED[Character.getNumericValue(count.charAt(i))]);
			}
			uiManager.addObject(digitsC[i]);
		}
		
		//Draws CHARGE bar
		if (timeBomb < 220)
			timeBomb++;
		if (timeBomb == 220) {
			charge.setY(194+(220-timeBomb));
			charge.setHeight(timeBomb);
			charge.setImage(Assets.bricks[0]);
		} else {
			charge.setY(194+(220-timeBomb));
			charge.setHeight(timeBomb);
			charge.setImage(Assets.bricks[5]);
		}
		
		time++;
		//Makes Ambiance and ticks the UI
		if (time >= 1 && combo > 10) {
			//for (int i = 0; i < 4; i++) {
				double wid = Math.random()*20+20;
				uiManager.addObject(new starParticle((float)(Math.random()*ballW+ball.getX()-wid/2), (float)(Math.random()*ballW+ball.getY()-wid/2), (int)wid, (int)wid, 20, 20, (float)ballVX*1.5f, (float)ballVY*1.5f));
				time = 0;
			//}
		}
		
		//Ticks the UI
		uiManager.tick();
	}

	public void render(Graphics g) { //Renders everything
		uiManager.render(g);
	}
}
